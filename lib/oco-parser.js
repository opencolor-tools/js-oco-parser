/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ocoParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,18],$V3=[1,12],$V4=[1,14],$V5=[1,15],$V6=[1,21],$V7=[1,4,44,47],$V8=[1,27],$V9=[1,26],$Va=[2,40],$Vb=[1,35],$Vc=[1,31],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,40],$Vh=[1,44],$Vi=[1,43],$Vj=[1,4,32,37,44,47],$Vk=[1,4,18,19,20,22,25,32,34,44,47],$Vl=[2,14],$Vm=[1,52],$Vn=[1,4,32,44,47],$Vo=[1,4,18,19,20,32,44,47],$Vp=[1,71],$Vq=[1,70],$Vr=[1,4,25,32,44,47],$Vs=[37,42],$Vt=[1,90],$Vu=[1,89],$Vv=[4,44,47];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"entries":5,"entry":6,"newlines":7,"entryname":8,"commentOrNot":9,"block":10,"colorvalues":11,"reference":12,"metaname":13,"metablock":14,"metavalue":15,"comment":16,"namepart":17,"NAME":18,"NUMBER":19,"HEXNUMBER":20,"nameparts":21,":":22,"=":23,"referenceNames":24,".":25,"metaentries":26,"metadata":27,"metavalueparts":28,"boolean":29,"colorvalue":30,"metanameparts":31,"COMMENTSTART":32,"STRING":33,"/":34,"INDENT":35,"outdentOrEof":36,",":37,"hexnum":38,"#":39,"(":40,"colorvaluevalues":41,")":42,"colorvaluevalue":43,"NEWLINE":44,"TRUE":45,"FALSE":46,"OUTDENT":47,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",18:"NAME",19:"NUMBER",20:"HEXNUMBER",22:":",23:"=",25:".",32:"COMMENTSTART",33:"STRING",34:"/",35:"INDENT",37:",",39:"#",40:"(",42:")",44:"NEWLINE",45:"TRUE",46:"FALSE",47:"OUTDENT"},
productions_: [0,[3,1],[3,1],[3,2],[5,1],[5,3],[5,2],[6,4],[6,3],[6,3],[6,4],[6,3],[6,2],[6,1],[17,1],[17,1],[17,1],[21,1],[21,2],[8,2],[12,2],[24,1],[24,3],[26,1],[26,3],[26,2],[27,2],[27,3],[15,1],[15,1],[15,1],[15,1],[15,1],[28,1],[28,1],[28,2],[28,2],[28,2],[13,2],[9,1],[9,0],[16,2],[16,2],[31,2],[31,3],[31,4],[31,3],[31,2],[10,3],[14,3],[11,1],[11,3],[38,1],[30,2],[30,2],[30,4],[41,1],[41,3],[43,1],[43,1],[7,1],[29,1],[29,1],[36,1],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Entry('root', [], 'Root', _$[$0]) 
break;
case 2:
  return new yy.Entry('root', $$[$0], 'Root', _$[$0]) 
break;
case 3:
  return new yy.Entry('root', $$[$0-1], 'Root', _$[$0-1]) 
break;
case 4:
 this.$ = [ $$[$0] ];
break;
case 5:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 6: case 12: case 25: case 38: case 48: case 49:
 this.$ = $$[$0-1]; 
break;
case 7:
 this.$ = new yy.Entry($$[$0-3], $$[$0], null, _$[$0]);
break;
case 8:
 this.$ = new yy.Entry($$[$0-2], $$[$0-1], 'Color', _$[$0-1]);
break;
case 9:
 this.$ = new yy.Reference($$[$0-2], $$[$0-1]);  
break;
case 10:
 this.$ = new yy.Entry($$[$0-3], $$[$0], 'Metablock', _$[$0]); 
break;
case 11:
 this.$ = new yy.Metadata($$[$0-2], $$[$0-1]);  
break;
case 13:
 this.$ = null 
break;
case 14: case 15: case 16: case 17: case 33: case 34:
 this.$ = $$[$0];
break;
case 18:
Â this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 19:
 this.$ = $$[$0-1];
break;
case 20: case 28: case 30: case 31:
 this.$ = $$[$0]; 
break;
case 21:
 this.$ = "" + $$[$0];
break;
case 22:
 this.$ = $$[$0-2] + '.' + $$[$0]; 
break;
case 23:
 this.$ = [$$[$0]];  
break;
case 24:
 this.$ = $$[$0-2]; this.$.push($$[$0]) 
break;
case 26:
 this.$ = new yy.Metadata($$[$0-1], $$[$0]);  
break;
case 27:
 this.$ = new yy.Metadata($$[$0-2], $$[$0]);  
break;
case 29:
 this.$ = parseFloat($$[$0]); 
break;
case 32:
 this.$ = new yy.Reference('metachild', $$[$0]); 
break;
case 35: case 36: case 37:
 this.$ = $$[$0-1] + " " + $$[$0] 
break;
case 41: case 42:
 this.$ = $$[$0] 
break;
case 43:
 this.$ = '/' + $$[$0] 
break;
case 44: case 46:
 this.$ = $$[$0-2] + '/' + $$[$0] 
break;
case 45:
 this.$ = '/' + $$[$0-2] + '/' + $$[$0] 
break;
case 47:
 this.$ = $$[$0-1] + '/' 
break;
case 50:
 this.$ = [$$[$0]] 
break;
case 51:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1]); 
break;
case 52:
 this.$ = yytext; 
break;
case 53: case 54:
 this.$ = new yy.ColorValue('rgb', "#" + $$[$0]); 
break;
case 55:
 this.$ = new yy.ColorValue($$[$0-3], $$[$0-3] + "(" + $$[$0-1].join(",") + ")");
break;
case 56:
 this.$ = [$$[$0]]; 
break;
case 57:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 61:
 this.$ = true; 
break;
case 62:
 this.$ = false; 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,8:5,11:7,13:6,16:8,17:13,18:$V0,19:$V1,20:$V2,21:9,30:11,31:10,32:$V3,34:$V4,39:$V5},{1:[3]},{1:[2,1]},{1:[2,2],4:[1,19],7:20,44:$V6},o($V7,[2,4]),{9:22,11:23,12:24,16:25,18:$V8,23:$V9,30:11,32:$V3,39:$V5,44:$Va},{9:28,12:34,15:29,16:25,18:$Vb,19:$Vc,20:$Vd,23:$V9,28:30,29:32,30:33,32:$V3,39:$V5,44:$Va,45:$Ve,46:$Vf},o($V7,$Va,{16:25,9:39,32:$V3,37:$Vg}),o($V7,[2,13]),{17:42,18:$Vh,19:$V1,20:$V2,22:[1,41],34:$Vi},{22:[1,45]},o($Vj,[2,50]),{17:13,18:$Vh,19:$V1,20:$V2,21:46,33:[1,47]},o($Vk,[2,17]),{17:13,18:$Vh,19:$V1,20:$V2,21:48},{19:[1,50],20:[1,51],38:49},o([18,19,20,22,34],$Vl,{40:$Vm}),o($Vk,[2,15]),o($Vk,[2,16]),{1:[2,3]},o($V7,[2,6],{8:5,13:6,11:7,16:8,21:9,31:10,30:11,17:13,6:53,18:$V0,19:$V1,20:$V2,32:$V3,34:$V4,39:$V5}),o([1,4,18,19,20,32,34,35,39,44,47],[2,60]),{7:54,44:$V6},o($V7,$Va,{16:25,9:55,32:$V3,37:$Vg}),o($V7,$Va,{16:25,9:56,32:$V3}),o($V7,[2,39]),{17:13,18:$Vh,19:$V1,20:$V2,21:58,24:57},{40:$Vm},{7:59,44:$V6},o($V7,$Va,{16:25,9:60,32:$V3}),o($Vn,[2,28],{18:[1,61],19:[1,62],20:[1,63]}),o($Vn,[2,29]),o($Vn,[2,30]),o($Vn,[2,31]),o($Vn,[2,32]),o($Vo,[2,33],{40:$Vm}),o($Vo,[2,34]),o($Vn,[2,61]),o($Vn,[2,62]),o($V7,[2,12]),{18:$V8,30:64,39:$V5},o([18,23,32,39,44],[2,19]),o($Vk,[2,18]),{17:13,18:$Vh,19:$V1,20:$V2,21:65,22:[2,47],31:66,34:$V4},o($Vk,$Vl),o([18,19,20,23,32,39,44,45,46],[2,38]),o($V7,[2,41],{17:42,18:$Vh,19:$V1,20:$V2}),o($V7,[2,42]),{17:42,18:$Vh,19:$V1,20:$V2,22:[2,43],34:[1,67]},o($Vj,[2,53]),o($Vj,[2,54]),o($Vj,[2,52]),{18:$Vp,19:$Vq,41:68,43:69},o($V7,[2,5]),{10:72,35:[1,73]},o($V7,[2,8]),o($V7,[2,9]),o($Vn,[2,20],{25:[1,74]}),o($Vr,[2,21],{17:42,18:$Vh,19:$V1,20:$V2}),{14:75,35:[1,76]},o($V7,[2,11]),o($Vo,[2,35]),o($Vo,[2,36]),o($Vo,[2,37]),o($Vj,[2,51]),{17:42,18:$Vh,19:$V1,20:$V2,22:[2,44],34:$Vi},{22:[2,46]},{17:13,18:$Vh,19:$V1,20:$V2,21:78,31:77,34:$V4},{37:[1,80],42:[1,79]},o($Vs,[2,56]),o($Vs,[2,58]),o($Vs,[2,59]),o($V7,[2,7]),{5:81,6:4,8:5,11:7,13:6,16:8,17:13,18:$V0,19:$V1,20:$V2,21:9,30:11,31:10,32:$V3,34:$V4,39:$V5},{17:13,18:$Vh,19:$V1,20:$V2,21:82},o($V7,[2,10]),{13:85,17:13,18:$Vh,19:$V1,20:$V2,21:86,26:83,27:84,31:10,34:$V4},{22:[2,45]},{17:42,18:$Vh,19:$V1,20:$V2,34:$Vi},o($Vj,[2,55]),{18:$Vp,19:$Vq,43:87},{4:$Vt,7:20,36:88,44:$V6,47:$Vu},o($Vr,[2,22],{17:42,18:$Vh,19:$V1,20:$V2}),{4:$Vt,7:92,36:91,44:$V6,47:$Vu},o($Vv,[2,23]),{12:34,15:93,18:$Vb,19:$Vc,20:$Vd,23:$V9,28:30,29:32,30:33,39:$V5,45:$Ve,46:$Vf},{17:42,18:$Vh,19:$V1,20:$V2,22:[1,94],34:$Vi},o($Vs,[2,57]),o($V7,[2,48]),o($V7,[2,63]),o($V7,[2,64]),o($V7,[2,49]),o($Vv,[2,25],{31:10,17:13,13:85,21:86,27:95,18:$Vh,19:$V1,20:$V2,34:$V4}),o($Vv,[2,26]),{12:34,15:96,18:$Vb,19:$Vc,20:$Vd,23:$V9,28:30,29:32,30:33,39:$V5,45:$Ve,46:$Vf},o($Vv,[2,24]),o($Vv,[2,27])],
defaultActions: {2:[2,1],19:[2,3],66:[2,46],77:[2,45]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ocoParser;
exports.Parser = ocoParser.Parser;
exports.parse = function () { return ocoParser.parse.apply(ocoParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}