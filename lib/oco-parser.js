/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ocoParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,21],$V8=[1,4,39,42],$V9=[1,25],$Va=[1,26],$Vb=[2,40],$Vc=[1,34],$Vd=[1,30],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,39],$Vi=[1,42],$Vj=[1,4,16,35,39,42],$Vk=[1,4,16,18,19,20,22,25,32,39,42],$Vl=[1,4,16,39,42],$Vm=[1,4,16,18,19,20,39,42],$Vn=[1,4,16,25,39,42],$Vo=[1,78],$Vp=[1,77],$Vq=[4,39,42];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"EOF":4,"entries":5,"entry":6,"newlines":7,"entryname":8,"commentOrNot":9,"block":10,"colorvalues":11,"reference":12,"metaname":13,"metablock":14,"metavalue":15,"COMMENT":16,"namepart":17,"NAME":18,"NUMBER":19,"HEXNUMBER":20,"nameparts":21,":":22,"=":23,"referenceNames":24,".":25,"metaentries":26,"metadata":27,"metavalueparts":28,"boolean":29,"colorvalue":30,"metanameparts":31,"/":32,"INDENT":33,"outdentOrEof":34,",":35,"hexnum":36,"#":37,"COLORVALUE":38,"NEWLINE":39,"TRUE":40,"FALSE":41,"OUTDENT":42,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",16:"COMMENT",18:"NAME",19:"NUMBER",20:"HEXNUMBER",22:":",23:"=",25:".",32:"/",33:"INDENT",35:",",37:"#",38:"COLORVALUE",39:"NEWLINE",40:"TRUE",41:"FALSE",42:"OUTDENT"},
productions_: [0,[3,1],[3,1],[3,2],[5,1],[5,3],[5,2],[6,4],[6,3],[6,3],[6,4],[6,3],[6,2],[6,1],[17,1],[17,1],[17,1],[21,1],[21,2],[8,2],[12,2],[24,1],[24,3],[26,1],[26,3],[26,2],[27,3],[27,4],[15,1],[15,1],[15,1],[15,1],[15,1],[28,1],[28,1],[28,2],[28,2],[28,2],[13,2],[9,1],[9,0],[31,2],[31,3],[31,4],[31,3],[31,2],[10,3],[14,3],[11,1],[11,3],[36,1],[30,2],[30,2],[30,1],[7,1],[29,1],[29,1],[34,1],[34,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new yy.Entry('root', [], 'Root', _$[$0]) 
break;
case 2:
  return new yy.Entry('root', $$[$0], 'Root', _$[$0]) 
break;
case 3:
  return new yy.Entry('root', $$[$0-1], 'Root', _$[$0-1]) 
break;
case 4:
 this.$ = [ $$[$0] ];
break;
case 5:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
case 6: case 12: case 25: case 38: case 46: case 47:
 this.$ = $$[$0-1]; 
break;
case 7:
 this.$ = new yy.Entry($$[$0-3], $$[$0], null, _$[$0]);
break;
case 8:
 this.$ = new yy.Entry($$[$0-2], $$[$0-1], 'Color', _$[$0-1]);
break;
case 9:
 this.$ = new yy.Reference($$[$0-2], $$[$0-1]);  
break;
case 10:
 this.$ = new yy.Entry($$[$0-3], $$[$0], 'Metablock', _$[$0]); 
break;
case 11: case 26:
 this.$ = new yy.Metadata($$[$0-2], $$[$0-1]);  
break;
case 13:
 this.$ = null 
break;
case 14: case 15: case 16: case 17: case 33: case 34:
 this.$ = $$[$0];
break;
case 18:
Â this.$ = $$[$0-1] + ' ' + $$[$0] 
break;
case 19:
 this.$ = $$[$0-1];
break;
case 20: case 28: case 30: case 31:
 this.$ = $$[$0]; 
break;
case 21:
 this.$ = "" + $$[$0];
break;
case 22:
 this.$ = $$[$0-2] + '.' + $$[$0]; 
break;
case 23:
 this.$ = [$$[$0]];  
break;
case 24:
 this.$ = $$[$0-2]; this.$.push($$[$0]) 
break;
case 27:
 this.$ = new yy.Metadata($$[$0-3], $$[$0-1]);  
break;
case 29:
 this.$ = parseFloat($$[$0]); 
break;
case 32:
 this.$ = new yy.Reference('metachild', $$[$0]); 
break;
case 35: case 36: case 37:
 this.$ = $$[$0-1] + " " + $$[$0] 
break;
case 41:
 this.$ = '/' + $$[$0] 
break;
case 42: case 44:
 this.$ = $$[$0-2] + '/' + $$[$0] 
break;
case 43:
 this.$ = '/' + $$[$0-2] + '/' + $$[$0] 
break;
case 45:
 this.$ = $$[$0-1] + '/' 
break;
case 48:
 this.$ = [$$[$0]] 
break;
case 49:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1]); 
break;
case 50:
 this.$ = yytext; 
break;
case 51: case 52:
 this.$ = new yy.ColorValue('rgb', "#" + $$[$0]); 
break;
case 53:
 this.$ = new yy.ColorValue.fromColorValue($$[$0]);
break;
case 55:
 this.$ = true; 
break;
case 56:
 this.$ = false; 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,8:5,11:7,13:6,16:$V0,17:12,18:$V1,19:$V2,20:$V3,21:9,30:11,31:10,32:$V4,37:$V5,38:$V6},{1:[3]},{1:[2,1]},{1:[2,2],4:[1,19],7:20,39:$V7},o($V8,[2,4]),{9:22,11:23,12:24,16:$V9,23:$Va,30:11,37:$V5,38:$V6,39:$Vb},{9:27,12:33,15:28,16:$V9,18:$Vc,19:$Vd,20:$Ve,23:$Va,28:29,29:31,30:32,37:$V5,38:$V6,39:$Vb,40:$Vf,41:$Vg},o($V8,$Vb,{9:38,16:$V9,35:$Vh}),o($V8,[2,13]),{17:41,18:$V1,19:$V2,20:$V3,22:[1,40],32:$Vi},{22:[1,43]},o($Vj,[2,48]),o($Vk,[2,17]),{17:12,18:$V1,19:$V2,20:$V3,21:44},{19:[1,46],20:[1,47],36:45},o($Vj,[2,53]),o($Vk,[2,14]),o($Vk,[2,15]),o($Vk,[2,16]),{1:[2,3]},o($V8,[2,6],{8:5,13:6,11:7,21:9,31:10,30:11,17:12,6:48,16:$V0,18:$V1,19:$V2,20:$V3,32:$V4,37:$V5,38:$V6}),o([1,4,16,18,19,20,32,33,37,38,39,42],[2,54]),{7:49,39:$V7},o($V8,$Vb,{9:50,16:$V9,35:$Vh}),o($V8,$Vb,{9:51,16:$V9}),o($V8,[2,39]),{17:12,18:$V1,19:$V2,20:$V3,21:53,24:52},{7:54,39:$V7},o($V8,$Vb,{9:55,16:$V9}),o($Vl,[2,28],{18:[1,56],19:[1,57],20:[1,58]}),o($Vl,[2,29]),o($Vl,[2,30]),o($Vl,[2,31]),o($Vl,[2,32]),o($Vm,[2,33]),o($Vm,[2,34]),o($Vl,[2,55]),o($Vl,[2,56]),o($V8,[2,12]),{30:59,37:$V5,38:$V6},o([16,23,37,38,39],[2,19]),o($Vk,[2,18]),{17:12,18:$V1,19:$V2,20:$V3,21:60,22:[2,45],31:61,32:$V4},o([16,18,19,20,23,37,38,39,40,41],[2,38]),{17:41,18:$V1,19:$V2,20:$V3,22:[2,41],32:[1,62]},o($Vj,[2,51]),o($Vj,[2,52]),o($Vj,[2,50]),o($V8,[2,5]),{10:63,33:[1,64]},o($V8,[2,8]),o($V8,[2,9]),o($Vl,[2,20],{25:[1,65]}),o($Vn,[2,21],{17:41,18:$V1,19:$V2,20:$V3}),{14:66,33:[1,67]},o($V8,[2,11]),o($Vm,[2,35]),o($Vm,[2,36]),o($Vm,[2,37]),o($Vj,[2,49]),{17:41,18:$V1,19:$V2,20:$V3,22:[2,42],32:$Vi},{22:[2,44]},{17:12,18:$V1,19:$V2,20:$V3,21:69,31:68,32:$V4},o($V8,[2,7]),{5:70,6:4,8:5,11:7,13:6,16:$V0,17:12,18:$V1,19:$V2,20:$V3,21:9,30:11,31:10,32:$V4,37:$V5,38:$V6},{17:12,18:$V1,19:$V2,20:$V3,21:71},o($V8,[2,10]),{13:74,17:12,18:$V1,19:$V2,20:$V3,21:75,26:72,27:73,31:10,32:$V4},{22:[2,43]},{17:41,18:$V1,19:$V2,20:$V3,32:$Vi},{4:$Vo,7:20,34:76,39:$V7,42:$Vp},o($Vn,[2,22],{17:41,18:$V1,19:$V2,20:$V3}),{4:$Vo,7:80,34:79,39:$V7,42:$Vp},o($Vq,[2,23]),{12:33,15:81,18:$Vc,19:$Vd,20:$Ve,23:$Va,28:29,29:31,30:32,37:$V5,38:$V6,40:$Vf,41:$Vg},{17:41,18:$V1,19:$V2,20:$V3,22:[1,82],32:$Vi},o($V8,[2,46]),o($V8,[2,57]),o($V8,[2,58]),o($V8,[2,47]),o($Vq,[2,25],{31:10,17:12,13:74,21:75,27:83,18:$V1,19:$V2,20:$V3,32:$V4}),o($Vq,$Vb,{9:84,16:$V9}),{12:33,15:85,18:$Vc,19:$Vd,20:$Ve,23:$Va,28:29,29:31,30:32,37:$V5,38:$V6,40:$Vf,41:$Vg},o($Vq,[2,24]),o($Vq,[2,26]),o($Vq,$Vb,{9:86,16:$V9}),o($Vq,[2,27])],
defaultActions: {2:[2,1],19:[2,3],61:[2,44],68:[2,43]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ocoParser;
exports.Parser = ocoParser.Parser;
exports.parse = function () { return ocoParser.parse.apply(ocoParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}